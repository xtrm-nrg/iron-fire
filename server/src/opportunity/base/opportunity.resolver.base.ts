/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateOpportunityArgs } from "./CreateOpportunityArgs";
import { UpdateOpportunityArgs } from "./UpdateOpportunityArgs";
import { DeleteOpportunityArgs } from "./DeleteOpportunityArgs";
import { OpportunityFindManyArgs } from "./OpportunityFindManyArgs";
import { OpportunityFindUniqueArgs } from "./OpportunityFindUniqueArgs";
import { Opportunity } from "./Opportunity";
import { OpportunityService } from "../opportunity.service";

@graphql.Resolver(() => Opportunity)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class OpportunityResolverBase {
  constructor(
    protected readonly service: OpportunityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Opportunity",
    action: "read",
    possession: "any",
  })
  async _opportunitiesMeta(
    @graphql.Args() args: OpportunityFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Opportunity])
  @nestAccessControl.UseRoles({
    resource: "Opportunity",
    action: "read",
    possession: "any",
  })
  async opportunities(
    @graphql.Args() args: OpportunityFindManyArgs
  ): Promise<Opportunity[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Opportunity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Opportunity",
    action: "read",
    possession: "own",
  })
  async opportunity(
    @graphql.Args() args: OpportunityFindUniqueArgs
  ): Promise<Opportunity | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Opportunity)
  @nestAccessControl.UseRoles({
    resource: "Opportunity",
    action: "create",
    possession: "any",
  })
  async createOpportunity(
    @graphql.Args() args: CreateOpportunityArgs
  ): Promise<Opportunity> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Opportunity)
  @nestAccessControl.UseRoles({
    resource: "Opportunity",
    action: "update",
    possession: "any",
  })
  async updateOpportunity(
    @graphql.Args() args: UpdateOpportunityArgs
  ): Promise<Opportunity | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Opportunity)
  @nestAccessControl.UseRoles({
    resource: "Opportunity",
    action: "delete",
    possession: "any",
  })
  async deleteOpportunity(
    @graphql.Args() args: DeleteOpportunityArgs
  ): Promise<Opportunity | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
